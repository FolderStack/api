service: folderstack

frameworkVersion: '3'
useDotenv: true

package:
    individually: false
    excludeDevDependencies: true
    exclude:
        - 'node_modules/**'

plugins:
    - serverless-domain-manager
    - serverless-prune-plugin
    - serverless-esbuild
    - serverless-dynamodb-local
    - serverless-api-gateway-caching
    - serverless-offline

custom:
    prune:
        automatic: true
        number: 1
    serviceName: api
    currentStage: ${opt:stage, 'local'}
    logLevels:  
        production: warn
        staging: warn
        local: debug
    logLevel: ${self:custom.logLevels.${self:custom.currentStage}, 'info'}
    apiGatewayCaching:
        enabled: true
        ttlInSeconds: 60
    domains:
        production: "api.folderstack.io"
        staging: "staging-api.folderstack.io"
        local: "localhost"
    customDomain:
        domainName: ${self:custom.domains.${self:custom.currentStage}}
        basePath: "v1"
        stage: ${self:custom.currentStage}
        certificateName: "*.folderstack.io"
        createRoute53Record: true
    esbuild:
        bundle: true
        minify: false
        target: node16
        packager: yarn
        sourcemap: true
        sourcesContent: false
        external: ['aws-sdk']
    serverless-offline:
        httpPort: 4000
        lambdaPort: 4001
    dynamodb:
        stages:
            - None
        start:
            migrate: true
            inMemory: true
            docker: true
            seed: true
        seed:
            testSeeds:
                sources:
                    - table: folderstack-local
                      sources: [./test.seed.json]
    serverless-offline-sqs:
        autoCreate: true
        apiVersion: '2012-11-05'
        endpoint: http://0.0.0.0:9324
        region: ap-southeast-2
        accessKeyId: root
        secretAccessKey: root
        skipCacheInvalidation: false
    layers:
        - arn:aws:lambda:${self:provider.region}:943013980633:layer:SentryNodeServerlessSDK:26
    table:
        local: "folderstack-staging"
        staging: "folderstack-staging"
        production: "folderstack-production"
    bucket: "folderstack-assets-${self:custom.currentStage}"

provider:
    name: aws
    runtime: nodejs16.x
    region: ap-southeast-2
    memorySize: 128
    environment:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '0'
        ENV: ${self:custom.currentStage}
        LOG_LEVEL: ${self:custom.logLevel, 'info'}
        TABLE_NAME: ${self:custom.table.${self:custom.currentStage}}
        BUCKET_NAME: ${self:custom.bucket}
        STAGE: ${self:custom.currentStage}
        SERVICE_NAME: ${self:service}
        DAX_ENDPOINT: "daxs://folderstack-prod.sa2tye.dax-clusters.ap-southeast-2.amazonaws.com:9111"
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
          Resource: "arn:aws:s3:::${self:custom.bucket}/*"
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "dax:*"
          Resource: "*"


resources:
    - ${file(./sls/resources/roles/jobs.yaml)}
    - ${file(./sls/resources/tables/assets.yaml)}
    - ${file(./sls/resources/api/responses.yaml)}
    - ${file(./sls/outputs.yaml)}

functions:
    - ${file(./src/service-authoriser/sls.yaml)}
    - ${file(./src/service-org/sls.yaml)}
    - ${file(./src/service-assets/sls.yaml)}
    - ${file(./src/service-thumbnails/sls.yaml)}
    - ${file(./src/service-jobs/sls.yaml)}