service: damdam

frameworkVersion: '3'
useDotenv: true

package:
    individually: false
    excludeDevDependencies: true

plugins:
    - serverless-domain-manager
    - serverless-prune-plugin
    - serverless-esbuild
    - serverless-offline-sqs
    - serverless-offline-sqs-dlq
    - serverless-dynamodb-local
    - serverless-offline-ssm
    - serverless-offline

custom:
    prune:
        automatic: true
        number: 1
    serviceName: api
    currentStage: ${opt:stage, 'local'}
    logLevels:  
        production: warn
        staging: warn
        local: debug
    logLevel: ${self:custom.logLevels.${self:custom.currentStage}, 'info'}
    domains:
        production: "api.peakdam.com"
        staging: "staging-api.peakdam.com"
        local: "localhost"
    customDomain:
        domainName: ${self:custom.domains.${self:custom.currentStage}}
        basePath: "api/v1"
        stage: ${self:custom.currentStage}
        certificateName: "*.peakdam.com"
        createRoute53Record: true
    esbuild:
        bundle: true
        minify: false
        target: node16
        packager: yarn
        sourcemap: true
        sourcesContent: true
    serverless-offline:
        httpPort: 4000
        lambdaPort: 4001
    dynamodb:
        stages:
            - local
        start:
            migrate: true
            inMemory: true
            docker: true
            seed: true
    serverless-offline-ssm:
        stages:
            - local
        ssm:
            '/damdam/local/ApiDomainName': 'localhost'
            '/damdam/local/AUDIENCE': 'x'
            '/damdam/local/JWKS_URI': 'x'
            '/damdam/local/TOKEN_ISSUER': 'x'
    serverless-offline-sqs:
        autoCreate: true
        apiVersion: '2012-11-05'
        endpoint: http://0.0.0.0:9324
        region: ap-southeast-2
        accessKeyId: root
        secretAccessKey: root
        skipCacheInvalidation: false
    layers:
        - arn:aws:lambda:${self:provider.region}:943013980633:layer:SentryNodeServerlessSDK:26
    environment:
        aws:
            keyId:
                local: ${env:AWS_ACCESS_KEY_ID}
            accessKey:
                local: ${env:AWS_SECRET_ACCESS_KEY}
        treeTable:
            production: 'damdam-tree-production'
            staging: 'damdam-tree-staging'
            local: 'damdam-tree-staging'
        assetTable:
            production: 'damdam-assets-production'
            staging: 'damdam-assets-staging'
            local: 'damdam-assets-staging'
        assetBucket:
            production: 'damdam-assets-production'
            staging: 'damdam-assets-staging'
            local: 'damdam-assets-staging'

provider:
    name: aws
    runtime: nodejs16.x
    region: ap-southeast-2
    memorySize: 128
    environment:
        ASSET_TABLE_READ_CAPACITY: 5
        ASSET_TABLE_WRITE_CAPACITY: 5
        ASSET_TABLE_GSI_READ_CAPACITY: 5
        ASSET_TABLE_GSI_WRITE_CAPACITY: 5
        ASSET_TABLE_NAME: ${self:custom.environment.assetTable.${self:custom.currentStage}}
        ASSET_BUCKET_NAME: ${self:custom.environment.assetBucket.${self:custom.currentStage}}
        TREE_TABLE_NAME: ${self:custom.environment.treeTable.${self:custom.currentStage}}
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
        ENV: ${self:custom.currentStage}
        LOG_LEVEL: ${self:custom.logLevel, 'info'}
        SENTRY_TRACES_SAMPLE_RATE: '1.0'
        # SENTRY_DSN: 'https://1ec83179352a48769edba49e42338b18@o4504537071681536.ingest.sentry.io/4505028934959104'
        NODE_OPTIONS: '-r @sentry/serverless/cjs/awslambda-auto'
        ACCESS_KEY_ID: ${self:custom.environment.aws.keyId.${self:custom.currentStage}, ''}
        SECRET_ACCESS_KEY: ${self:custom.environment.aws.accessKey.${self:custom.currentStage}, ''}
        AUTH0_CLIENT_ID: 'Ub83VcmwDHMRdELQppbrEYkXBlCPShjN'
        AUTH_CLIENT_SECRET: 'H1ENukg7spuIbt1Igce8cxwtRJiUd9P16ly2EaU3ihSDoAAuWnXKQe1OVuK9M9bS'
        AUTH0_DOMAIN: 'https://peakdam.au.auth0.com'
    iamRoleStatements:
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
          Resource: "arn:aws:s3:::${self:custom.environment.assetBucket.${self:custom.currentStage}}/*"

resources:
    - ${file(./sls/resources/tables/assets.yaml)}

functions:
    - ${file(./src/service-authoriser/sls.yaml)}
    # - ${file(./src/service-org/sls.yaml)}
    # - ${file(./src/service-users/sls.yaml)}
    - ${file(./src/service-assets/sls.yaml)}
    - ${file(./src/service-thumbnails/sls.yaml)}